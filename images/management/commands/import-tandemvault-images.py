from django.core.management.base import BaseCommand
from images.models import *

import math
import logging
import requests


class Command(BaseCommand):
    help = 'Imports image assets from UCF\'s Tandem Vault instance.'

    source                      = 'Tandem Vault'
    modified                    = timezone.now()
    tandemvault_assets_api_path = '/api/v1/assets/'
    tandemvault_asset_api_path  = '/api/v1/assets/{0}/'
    tandemvault_total_images    = 0 # total number of images in Tandem Vault API results
    tandemvault_page_count      = 0 # total number of paged Tandem Vault API results
    images_created              = 0
    images_updated              = 0
    images_skipped              = 0
    images_deleted              = 0
    tags_created                = 0
    tags_updated                = 0
    tags_skipped                = 0
    tags_deleted                = 0

    def add_arguments(self, parser):
        # TODO allow date range or minimum date to be passed in?
        parser.add_argument(
            'domain',
            type=str,
            help='The base domain of UCF\'s Tandem Vault'
        ),
        parser.add_argument(
            '--tandemvault-api-key',
            type=str,
            help='The API key used to connect to Tandem Vault',
            dest='tandemvault-api-key',
            required=True
        ),
        parser.add_argument(
            '--tandemvault-tags-csv-url',
            type=str,
            help='URL that points to a CSV containing existing tag and synonym information from Tandem Vault',
            dest='tandemvault-tags-csv-url',
            required=False
        ),
        parser.add_argument(
            '--azure-api-key',
            type=str,
            help='The API key used to connect to Azure',
            dest='azure-api-key',
            required=False
        ),
        parser.add_argument(
            '--assign-tags',
            type=bool,
            help='Set to True to pass all imported images to Azure\'s Computer Vision API to generate image tags.',
            dest='assign-tags',
            default=False,
            required=False
        ),
        parser.add_argument(
            '--tag-confidence-threshold',
            type=float,
            help='The minimum confidence ranking a tag generated by Azure must have to be assigned to an image. Provide a decimal value between 0 and 1.',
            dest='tag-confidence-threshold',
            default=0,
            required=False
        ),

    def handle(self, *args, **options):
        self.domain = options['domain'].replace('http://', '').replace('https://', '')
        self.tandemvault_api_key = options['tandemvault-api-key']
        self.tandemvault_tags_csv = options['tandemvault-tags-csv-url']
        self.azure_api_key = options['azure-api-key']
        self.assign_tags = options['assign-tags']
        self.tag_confidence_threshold = options['tag-confidence-threshold']

        if self.assign_tags and not self.azure_api_key:
            print 'Azure API key required to assign tags via the Computer Vision API. Please provide an Azure API key and try again.'
            return

        if self.assign_tags and self.tag_confidence_threshold > 1 or self.tag_confidence_threshold < 0:
            print 'Tag confidence threshold value must be a value between 0 and 1.'
            return

        self.tandemvault_assets_api_url = 'https://' + self.domain + self.tandemvault_assets_api_path
        self.tandemvault_asset_api_url = 'https://' + self.domain + self.tandemvault_asset_api_path

        # TODO how to handle start/end dates? Do we always want to use the
        # same start date and force-delete old, existing images?
        self.tandemvault_assets_params = {
            'api_key'         = self.tandemvault_api_key,
            'state'           = 'accepted',
            'date[start(1i)]' = '2017',
            'date[start(2i)]' = '12',
            'date[start(3i)]' = '1',
            'date[end(1i)]'   = self.modified.year,
            'date[end(2i)]'   = self.modified.month,
            'date[end(3i)]'   = self.modified.day
        }
        self.tandemvault_asset_params = {
            'api_key' = self.tandemvault_api_key
        }

        # If a CSV of existing tags was provided, process it
        if self.tandemvault_tags_csv:
            self.load_tandemvault_tags()

        # Fetch + loop through all Tandem Vault API results
        self.process_images()

        # Delete stale images and image tags
        self.delete_stale()

        # Print the results
        self.print_stats()

        return

    '''
    Pre-load a CSV of Tandem Vault tags + synonyms.

    TODO
    '''
    def load_tandemvault_tags():
        pass

    '''
    The main image processing function that executes all API
    requests and Image + ImageTag object creation.
    '''
    def process_images(self):
        # Fetch the first page of results, which will set the total number
        # of results and total page count:
        self.process_tandemvault_assets_page(1)

        # Loop through the other pages of results:
        if self.tandemvault_page_count > 1:
            for page in range(2, self.tandemvault_page_count):
                self.process_tandemvault_assets_page(page)

    '''
    Fetches and loops through a single page of assets
    from the Tandem Vault API.
    '''
    def process_tandemvault_assets_page(self, page):
        # Fetch the page:
        page_json = self.fetch_tandemvault_assets_page(page)

        # Process each image in the results:
        for image in page_json:
            self.process_image(image)

    '''
    Processes a single Tandem Vault image.

    TODO catch/handle exceptions
    '''
    def process_image(self, tandemvault_image):
        # Set up the initial Image object.
        # TODO
        # image = Image.objects.get_or_create(

        # )

        # Fetch the single API result
        single_json = self.fetch_tandemvault_asset(tandemvault_image.id)

        # TODO need to add any single_json data to the Image?

        # image.save()

        tags = set(single_json.tag_list)

        # If Azure Computer Vision tagging is enabled,
        # send the image to Azure:
        if self.assign_tags:
            azure_data = self.azure_analyze_image(single_json.browse_url)
            azure_tags = []
            if azure_data:
                azure_tags = azure_data.tags
            for azure_tag in azure_tags:
                if azure_tag.confidence >= self.tag_confidence_threshold:
                    # TODO update to create a new ImageTag on the fly
                    tags.add(azure_tag.name)

        for tag in tags:
            # TODO
            pass

    '''
    Fetches a single page of results on the Tandem Vault assets API.

    TODO catch/handle exceptions
    '''
    def fetch_tandemvault_assets_page(self, page):
        params = self.tandemvault_assets_params.copy()
        params.update({
            'page': page
        })
        response = requests.get(
            self.tandemvault_assets_api_url,
            params=params
        )
        response_json = response.json()

        # Set some required importer properties if
        # this is the first page request:
        if page == 1:
            self.tandemvault_total_images = int(
                response.headers['total-results'])
            self.tandemvault_page_count = math.ceil(
                self.tandemvault_total_images / len(response_json))

        return response_json

    '''
    Fetches an API result for a single Tandem Vault image.

    TODO catch/handle exceptions
    '''
    def fetch_tandemvault_asset(self, tandemvault_image_id):
        response = requests.get(
            self.tandemvault_asset_api_url.format(tandemvault_image_id),
            params=self.tandemvault_asset_params
        )
        response_json = response.json()

        return response_json

    '''
    TODO
    '''
    def azure_analyze_image(self, image_url):
        pass

    '''
    Displays information about the import.
    '''
    def print_stats(self):
        stats = """
Finished import of Tandem Vault images.

Images
---------
Created: {0}
Updated: {1}
Skipped: {2}
Deleted: {3}

Image Tags
-------------
Created: {4}
Updated: {5}
Skipped: {6}
Deleted: {7}
        """.format(
            self.images_created,
            self.images_updated,
            self.images_skipped,
            self.images_deleted,
            self.tags_created,
            self.tags_updated,
            self.tags_skipped,
            self.tags_deleted
        )

        print(stats)

        return

    '''
    Deletes Image objects sourced from Tandem Vault that are no
    longer present in Tandem Vault, and deletes ImageTags that
    are not assigned to any Images.
    '''
    def delete_stale(self):
        stale_images = Image.objects.filter(
            modified__lt=self.modified,
            source=self.source
        )
        stale_tags = ImageTag.objects.filter(images=None)

        self.images_deleted = stale_images.count()
        self.tags_deleted = stale_tags.count()

        stale_images.delete()
        stale_tags.delete()

        return
